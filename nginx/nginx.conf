# File: nginx/nginx.conf

# ─────────────────────────────────────────────────────────────────────────────
# Optional performance tuning (safe to leave commented in dev)
# worker_processes auto;
# events {
#   worker_connections 1024;
# }

# Log all errors at the "debug" level (very verbose, useful for development)
error_log /var/log/nginx/error.log debug;

# ─────────────────────────────────────────────────────────────────────────────
# First server block: handles HTTP traffic (port 80)
server {
  listen [::]:80;           # Listen on IPv6 for port 80 (HTTP)
  listen 80;                # Listen on IPv4 for port 80 (HTTP)
  server_name localhost;    # Server name (domain); matches "localhost" requests

  # Redirect all HTTP traffic to HTTPS
  # This ensures secure access via HTTPS, improving security
  return 301 https://$host$request_uri;
}

# ─────────────────────────────────────────────────────────────────────────────
# Second server block: handles HTTPS traffic (port 443)
server {
  listen 443 ssl;           # Listen on port 443 with SSL enabled
  server_name localhost;    # Match requests sent to "localhost"

  # Path to SSL certificate and private key (self-signed, created in entrypoint)
  ssl_certificate     /etc/nginx/ssl/nginx.cert;
  ssl_certificate_key /etc/nginx/ssl/nginx.key;

  # ─── Additional SSL hardening (recommended for production) ─────────────────
  ssl_protocols TLSv1.2 TLSv1.3;   # Only allow strong TLS versions
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:CHACHA20-POLY1305-SHA256';
  ssl_prefer_server_ciphers on;   # Enforce preferred cipher order

  # ─────────────────────────────────────────────────────────────────────────────
  # 🛡️ Security Headers

  # Prevent loading content from unauthorized sources
  add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: blob:; font-src 'self' https://fonts.gstatic.com data:; object-src 'none'; base-uri 'self'; frame-ancestors 'none';" always;
  
  # Enforce HTTPS by telling browsers to only connect over HTTPS for 2 years
  # Also includes all subdomains and allows preloading into browser lists
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
  
  # Prevent MIME-type sniffing — forces browser to obey declared content
  add_header X-Content-Type-Options "nosniff" always;
  
  # Prevent the site from being loaded inside iframes (defends against clickjacking)
  add_header X-Frame-Options "DENY" always;
  
  # Enable basic XSS protection in browsers
  add_header X-XSS-Protection "1; mode=block" always;
  
  # Controls what information the Referer header includes when navigating
  add_header Referrer-Policy "no-referrer-when-downgrade" always;
  
  # Disable potentially invasive browser features for better privacy
  # Each feature is explicitly disallowed (e.g. camera, mic, etc.)
  add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()" always;
  
  # Hide the nginx version in HTTP response headers (minimize information disclosure)
  server_tokens off;

  # ─────────────────────────────────────────────────────────────────────────────
  # Serve static frontend files (the built SPA)
  root /usr/share/nginx/html;  # The folder containing the built frontend
  index index.html;            # Default file served when accessing a directory

  # This block proxies specific API/backend routes to the backend server
  # The regex matches specific route prefixes (e.g. /auth, /users, etc.)
  location ~ ^/(auth|users|matches|matchHistory|avatars|health) {
    proxy_pass         http://backend:3000;         # Forward request to backend service
    proxy_set_header   Host $host;                  # Forward original Host header
	proxy_set_header   X-Real-IP $remote_addr;        # Pass real IP
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;

  }

  # ─────────────────────────────────────────────────────────────────────────────
  # Optional WebSocket proxy support (e.g. for real-time matches or chat)
  location /ws/ {
    proxy_pass http://backend:3000;
    proxy_http_version 1.1;					# Use HTTP/1.1 for better support with web sockets
    proxy_set_header Upgrade $http_upgrade;	# Support WebSocket upgrades
    proxy_set_header Connection "Upgrade";	# Required for WebSocket
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  # ─────────────────────────────────────────────────────────────────────────────
  # SPA Routing Fallback
  # If the file doesn’t exist, serve index.html instead
  location / {
    try_files $uri $uri/ /index.html;
	# try_files: check if the file exists, otherwise fall back to index.html
    # This lets the frontend router handle the route instead of returning 404
  }
}

# ─────────────────────────────────────────────────────────────────────────────
# Optional: Gzip Compression (better performance for assets)
# These go in the top-level 'http' block, but many modern nginx images accept them globally
gzip on;
gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
gzip_vary on;
