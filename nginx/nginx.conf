# File: nginx/nginx.conf

# Log all errors at the "debug" level (very verbose, useful for development)
error_log /var/log/nginx/error.log debug;

# First server block: handles HTTP traffic (port 80)
server {
  listen [::]:80;           # Listen on IPv6 for port 80 (HTTP)
  listen 80;                # Listen on IPv4 for port 80 (HTTP)
  server_name localhost;    # Server name (domain); matches "localhost" requests

  # Redirect all HTTP traffic to HTTPS
  # This ensures secure access via HTTPS, improving security
  return 301 https://$host$request_uri;
}

# Second server block: handles HTTPS traffic (port 443)
server {
  listen 443 ssl;           # Listen on port 443 with SSL enabled
  server_name localhost;    # Match requests sent to "localhost"

  # Path to SSL certificate and private key (self-signed, created in entrypoint)
  ssl_certificate     /etc/nginx/ssl/nginx.cert;
  ssl_certificate_key /etc/nginx/ssl/nginx.key;

  # Serve static frontend files (the built SPA)
  root /usr/share/nginx/html;  # The folder containing the built frontend
  index index.html;            # Default file served when accessing a directory

  # This block proxies specific API/backend routes to the backend server
  # The regex matches specific route prefixes (e.g. /auth, /users, etc.)
  location ~ ^/(auth|users|matches|matchHistory|avatars|health) {
    proxy_pass         http://backend:3000;         # Forward request to backend service
    # proxy_http_version 1.1;                         # Use HTTP/1.1 for better support with web sockets
    # proxy_set_header   Upgrade $http_upgrade;       # Support WebSocket upgrades
    # proxy_set_header   Connection 'upgrade';        # Required for WebSocket
    proxy_set_header   Host $host;                  # Forward original Host header
    # proxy_cache_bypass $http_upgrade;               # Prevent caching upgraded (WS) requests
  }

  # This block handles all other requests (not API)
  # Used for SPA routing â€” so refreshing on /dashboard still serves index.html
  location / {
    try_files $uri $uri/ /index.html;
    # try_files: check if the file exists, otherwise fall back to index.html
    # This lets the frontend router handle the route instead of returning 404
  }
}


# 
# 
# server {
#   listen [::]:80;
#   listen 80;
#   server_name CatPong;

#   return 301 https://$host$request_uri;
# }

# server {
#   listen 443 ssl;
#   server_name CatPong;

#   ssl_certificate     /etc/nginx/ssl/nginx.cert;
#   ssl_certificate_key /etc/nginx/ssl/nginx.key;

#   root /usr/share/nginx/html;
#   index index.html;

#   location ~ ^/(auth|users|matches|matchHistory|avatars|health) {
#     proxy_pass         http://backend:3000;
#     proxy_http_version 1.1;
#     proxy_set_header   Upgrade $http_upgrade;
#     proxy_set_header   Connection 'upgrade';
#     proxy_set_header   Host $host;
#     proxy_cache_bypass $http_upgrade;
#   }

#   location / {
#     try_files $uri $uri/ /index.html;
#   }
# }