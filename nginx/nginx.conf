
server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name yourdomain.com;

    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:FastifyApp:10m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    location / {
        proxy_pass http://backend:3000; # Route to Fastify backend
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 80;
    listen [::]:80;
    server_name yourdomain.com;

    location / {
        return 301 https://$host$request_uri;
    }
}


# worker_processes 1;

# events {
# 	worker_connections 1024;
# }

# http {
# 	include /etc/nginx/mime.types;
# 	default_type application/octet-stream;
# 	sendfile on;
# 	keepalive_timeout 65;

# 	# Log settings (optional)
# 	access_log /var/log/nginx/access.log;
# 	error_log /var/log/nginx/error.log warn;

# 	# Gzip compression (optional)
# 	gzip on;

# 	# Upstream backend server
# 	upstream backend {
# 		server backend:3000;
# 	}

# 	server {
# 		listen 80;
# 		listen [::]:80;
# 		# server_name _;
# 		server_name localhost;

# 		# Redirect all HTTP traffic to HTTPS
# 		return 301 https://$host$request_uri;
# 	}

# 	server {
# 		listen 443 ssl;
# 		listen [::]:443 ssl;
# 		# server_name _;
# 		server_name localhost;

# 		# SSL certificate configuration (use the certificates from backend/certs)
# 		# Use the certificates from the mounted volume
# 		ssl_certificate		/etc/nginx/certs/cert.pem;
# 		ssl_certificate_key	/etc/nginx/certs/key.pem;
# 		ssl_session_cache	shared:SSL:10m;
# 		ssl_session_timeout	10m;
# 		ssl_protocols		TLSv1.2 TLSv1.3;
# 		ssl_ciphers			HIGH:!aNULL:!MD5;
# 		ssl_prefer_server_ciphers on;

# 		# Serve static files from /usr/share/nginx/html
# 		root /usr/share/nginx/html;
# 		index index.html;

# 		# API proxy pass
# 		# location /auth/ {
# 		# 	proxy_pass         http://backend;
# 		#     proxy_http_version 1.1;
#     	# 	proxy_set_header   Upgrade $http_upgrade;
#     	# 	proxy_set_header   Connection 'upgrade';
#     	# 	proxy_set_header   Host $host;
#     	# 	proxy_cache_bypass $http_upgrade;
#     	# }

# 		location / {
# 			# If backend is running HTTPS, we add proxy_ssl_verify off
# 			proxy_pass https://backend;
#             proxy_ssl_verify off;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
# 		}

# 		# Fallback: try to serve static file, if not found, return index.html (for SPA routing)
# 		location / {
# 			try_files $uri $uri/ /index.html;
# 		}
# 	}
# }



# server {
#     listen 80;
# 	listen [::]:80;
# 	listen 443 ssl;

# 	# SSL certificate paths (automatically generated for localhost in backend setup)
# 	ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;

# 	# Server frontend files
#     location / {
#         root /usr/share/nginx/html;
#         index index.html;
#         try_files $uri /index.html;
#     }

# 	# Proxy requests to Fastify backend API
#     location /api/ {
#         proxy_pass https://backend:3000/;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# 		proxy_set_header X-Forwarded-Proto $scheme;
#     }

# 	# WebSocket proxy settings
# 	location /ws/ {
# 		proxy_pass https://backend:3000/;
#     	proxy_set_header Upgrade $http_upgrade;
#     	proxy_set_header Connection "Upgrade";
#     	proxy_set_header Host $host;
# 	}

# 	# Redirect HTTP to HTTPS
# 	server {
# 		listen 80;
# 		# server_name catpong.com;
# 		return 301 https://$host$request_uri;
# 	}


#     error_page 404 /index.html;

#     # Enable gzip compression
#     # gzip on;
#     # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
#     # gzip_vary on;
# }

# # Version mini
# server {
#     listen 80;

#     location / {
#         root /usr/share/nginx/html;
#         index index.html;
#         try_files $uri /index.html;
#     }

#     location /api/ {
#         proxy_pass http://ft_transcendence-backend:3000/;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#     }

#     error_page 404 /index.html;
# }


# # Version de jcoquet, kio ?
# http {
# 	server {
# 		listen 80;

# 		server_name $DOMAIN_NAME;

# 		# Redirect HTTP requests to HTTPS
# 		return 301 https://$host$request_uri;
# 	}

# 	# HTTPS
# 	server {
# 		listen 443 ssl;

# 		server_name $DOMAIN_NAME;

# 		ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt
# 		 ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

#         # SSL settings
#         ssl_protocols TLSv1.2 TLSv1.3;
#         ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:CHACHA20-POLY1305-SHA256';
#         ssl_prefer_server_ciphers on;


#         # Proxy requests to the front-end (Vite)
#         location / {
#             proxy_pass http://frontend:3000/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;

#             # WebSocket support for HMR (Hot Module Replacement)
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection 'upgrade';
#         }

#         # Proxy requests to the back-end (Django)
#         location /api/ {
#             proxy_pass http://backend:8000/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }
#     }
# }

# find a midpoint that fits the project between the previous simple one and handling the project requirements...

# worker_processes auto;
# events {
#     worker_connections 1024;
# }

# http {
#     include /etc/nginx/mime.types;
#     default_type application/octet-stream;

#     sendfile on;
#     tcp_nopush on;
#     tcp_nodelay on;
#     keepalive_timeout 65;
#     types_hash_max_size 2048;

#     server {
#         listen 80;
#         server_name _;

#         # Serve the frontend
#         location / {
#             root /usr/share/nginx/html;
#             index index.html;
#             try_files $uri /index.html;
#         }

#         # API requests forwarded to the backend
#         location /api/ {
#             proxy_pass http://ft_transcendence-backend:3000/;
#             proxy_http_version 1.1;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "Upgrade";
#         }

#         # WebSocket support (for real-time communication if needed)
#         location /ws/ {
#             proxy_pass http://ft_transcendence-backend:3000/;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "Upgrade";
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         }

#         # Handle 404 errors properly
#         error_page 404 /index.html;
#         location = /index.html {
#             root /usr/share/nginx/html;
#         }

#         # Compression to optimize performance
#         gzip on;
#         gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
#         gzip_vary on;
#     }
# }
