

TOCHECK:

demo fastify: https://github.com/fastify/demo/tree/main


---

Requis

- frontend typescript
- SPA (avec bouttons back - forward)
- pas d'erreur ou warnings non-gerés pour l'utilisateur
- Docker (doit tout lancer d'une seule commande)

Jeu
- 1v1
- tournois (doit montrer qui contre qui et ordre des parties)
- enregistrement: alias a entrer au debut du tournois, reset au prochain
	- (module Standard User Management peux changer ca)
- matchmaking (organiser et annoncer prochain match)
- meme regles et vitesse de paddle (ai aussi)
- doit capturer essence visuelle du Pong original

Securité
- passwords hachés dans base de données
- protection contre injections SQL / attaques XSS
- connection HTTPS pour tout
- validation des "forms" et "inputs" du user (gerer dans backend si applicable)
- (JWT et 2FA ou pas*) prioriser la Securité du site (proteger routes si API)
- algo de hachage de passwords suffisant
- "credentials", clefs API, variables env -> .env local ignoré par git

Liste de librairies ou outils a expliquer:

---

Modules:

Web
Major module: Use a Framework to build the backend.
Minor module: Use a framework or a toolkit to build the frontend.
Minor module: Use a database for the backend.
Major module: Store the score of a tournament in the Blockchain.

User Management
Major module: Standard user management, authentication, users across tournaments.
Major module: Implementing a remote authentication.

Gameplay and User Experience
Major module: Remote players
Major module: Multiplayers (more than 2 in the same game).
Major module: Add another game with user history and matchmaking.
Minor module: Game customization options.
Major module: Live chat.

AI-Algo
Major module: Introduce an AI opponent.
Minor module: User and game stats dashboards

Cybersecurity
Major module: Implement WAF/ModSecurity with a hardened configuration and HashiCorp Vault for secrets management.
Minor module: GDPR compliance options with user anonymization, local data management, and Account Deletion.
Major module: Implement Two-Factor Authentication (2FA) and JWT.

Devops
Major module: Infrastructure setup for log management.
Minor module: Monitoring system.
Major module: Designing the backend as microservices.

Graphics
Major module: Use of advanced 3D techniques.

Accessibility
Minor module: Support on all devices.
Minor module: Expanding browser compatibility.
Minor module: Supports multiple languages.
Minor module: Add accessibility features for visually impaired users.
Minor module: Server-Side Rendering (SSR) integration.

Server-Side Pong
Major module: Replace basic Pong with server-side Pong and implement an API.
Major module: Enabling Pong gameplay via CLI against web users with API integration

---

Sayd:

Modules:

Fait:
-(M) backend fastify
-(m) database sqlite
-(M) User management

A faire:
-(m) GDPR
-(M) Authentication 2FA et JWT

-(M) 
-(m) browser compatibility
-(m) Multi-languages ?
-(m) accessibility features


Ce qui est fait :
- 

Ce qui reste à faire :

Ce qu'on doit vérifier ensemble:
- ou placer les assets (communs dans root/assets/ ou separés)
- (ou placer avatar par defaut)
- changer creation de clefs ssh dans .env ?
- auto login quand on register ?

---

Naddy:

Ce qui est fait :
-Jeu Pong 3D fonctionnel avec collisions, accélération et score.
-Mode IA joue avec délai d’1s (ralenti si la balle accélère trop).
-Tournoi (4 ou 8 joueurs) jusqu’à la finale.
-Historique et statistiques visibles (mais pas stocker et récupérer grâce au backend).
-Connexion / Inscription (à tester si bien relié au backend) .
-Navigation en single page.
-Onglet dans menu déroulant pour savoir comment jouer. 


Ce qui reste à faire :
Connexion réelle au backend (auth, stats, historique, récupération du nickname pour le jeu).
