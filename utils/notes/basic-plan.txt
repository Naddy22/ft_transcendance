

Folder Structure
Basic Backend (Pure PHP)
Frontend (TypeScript SPA)
Makefile for automation
Docker setup in ./docker/
Basic entry points to ensure visibility in browser and terminal

ft_transcendence/
│── backend/					# Backend files (pure PHP)
│   ├── public/					# Publicly accessible PHP files
│   │   ├── index.php			# Entry point for backend
│   ├── src/					# Core backend logic
│   │   ├── Database.php		# SQLite connection (if needed)
│   │   ├── Matchmaking.php		# Basic matchmaking placeholder
│   ├── config/					# Configuration files
│   │   ├── config.php			# Configuration (DB, ENV loading)
│   ├── .env.example			# Example env file (ignored in .gitignore)
│
│── frontend/					# Frontend files (TypeScript SPA)
│   ├── src/					# Source code (React, Vue, or Vanilla TS)
│   │   ├── index.ts			# Main TypeScript entry
│   ├── public/					# Static assets
│   │   ├── index.html			# SPA entry point
│   ├── package.json			# Defines dependencies (npm init -y)
│   ├── tsconfig.json			# TypeScript config
│
│── docker/						# Docker setup
│   ├── Dockerfile.backend		# Backend container
│   ├── Dockerfile.frontend		# Frontend container
│   ├── docker-compose.yml		# Docker Compose file
│
│── Makefile					# Automation commands
│── .gitignore					# Ignore env and generated files
│── README.md					# Project documentation


////

// json files:

***
* running "npm init -y" generates a default package.json
*
* https://docs.npmjs.com/misc/scripts -> tu understand "scripts"
*
* What dependencies do we need?
*
* If we use TypeScript, we need "typescript" (npm install --save-dev typescript).
* If we need a server, "http-server" is a simple way to serve files.
***
// package.json:
{
  "name": "ft_transcendence_frontend",
  "version": "1.0.0",
  "description": "Frontend for ft_transcendence",
  "scripts": {
    "build": "tsc",  // Runs TypeScript compiler
    "start": "npx http-server public -p 3000"  // Serves the built files on port 3000
  },
  "dependencies": {},  // Dependencies for production (empty for now)
  "devDependencies": {
    "typescript": "^5.0.0",  // TypeScript compiler
    "http-server": "^14.1.1" // Lightweight server to serve frontend files
  }
}

***
* How do we know tsconfig.json is required?
*
* If we run tsc (TypeScript compiler) and it complains about missing tsconfig.json, we need it.
* Official TypeScript docs: https://www.typescriptlang.org/tsconfig
* 
* To generate a default tsconfig.json:
* 	npx tsc --init
* This will create a template configuration file...
***
// tsconfig.json:
{
  "compilerOptions": {
    "outDir": "./public",  // Outputs compiled JS into 'public/' folder
    "module": "ESNext",  // Uses modern ES module system
    "target": "ES6",  // Compiles to ES6 JavaScript
    "strict": true  // Enables strict mode for better type safety
  },
  "include": ["src"]  // Only compile files inside 'src' folder
}

